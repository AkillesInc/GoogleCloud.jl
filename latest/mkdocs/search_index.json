{
    "docs": [
        {
            "location": "/", 
            "text": "Google Cloud APIs for Julia\n\n\nThis module wraps Google Cloud Platform (GCP) APIs with Julia.\n\n\nCurrently only the Google Storage API has been added.\n\n\n\n\nQuick Start\n\n\nThis Quick Start walks through the steps required to store and retrieve data from Google Cloud Storage.\n\n\n\n\nIf you don't already have a Google account, create one \nhere\n.\n\n\nSign in to the GCP console \nhere\n.\n\n\n\n\nCreate a new project by clicking on the \nProject\n drop-down menu at the top of the page. If you already have a GCP project, click on the drop-down menu at the top of the page and select \nCreate project\n.\n\n\nA GCP project is a set of resources with common settings that is billed and managed separately from any resource outside the set. Thus a resource exists in exactly one project. Examples of resources include GCE instances, storage volumes and data on those volumes. A project's settings include ownership, users and their permissions, and associated GCP services. As a user anything you do on GCP happens within a project, including data storage, compute, messaging, logging, etc.\n4. Associated with your project are credentials that allow users to add, read and remove resources from the project. Get the credentials for your project as a JSON file from your \nGCP Credentials\n page:\n\n\n\n\nType \ncredentials\n into the search bar at the top of the console.\n\n\nSelect \nCredentials API Manager\n from the search results.\n\n\nClick on the \nCreate credentials\n drop-down menu and select \nService account key\n.\n\n\nFrom the \nService Account\n menu select \nNew service account\n.\n\n\nFrom \nRole\n select \nStorage \n Storage Admin\n.\n\n\nEnsure the key type is JSON.\n\n\nClick \nCreate\n.\n\n\n\n\nCredentials are then automatically downloaded in a JSON file. Save this file to your machine. In this tutorial we save the service account credentials to \n~/credentials.json\n.\n5. Start Julia and install the \nGoogleCloud.jl\n package.\n\n\njulia\nPkg.add(\"GoogleCloud\")\nusing GoogleCloud\n\n6. Load the service account credentials.\n\n\njulia\ncreds = GoogleCredentials(expanduser(\"~/credentials.json\"))\n\n7. Create a session with the credentials, requesting any required scopes.\n\n\njulia\nsession = GoogleSession(creds, [\"devstorage.full_control\"])\n\n8. Set the default session of an API using \nset_session\n\n\njulia\nset_session(storage, session)    # storage is a variable exported from GoogleCloud.jl\n\n9. List all existing buckets in your project. The list contains a default bucket.\n\n\n```julia\nbkts = storage(:Bucket, :list)    # storage(:Bucket, :list; raw=true) returns addition information\n\n\nPretty print\n\n\nfor item in bkts\n    display(item)\n    println()\nend\n```\n10. Create a bucket called \na12345foo\n. \nNote\n: The bucket name must be unique...across all buckets in GCP!\n\n\n```julia\nstorage(:Bucket, :insert; data=Dict(:name =\n \"a12345foo\"))\n\n\nVerify the new bucket exists in the project\n\n\nbkts = storage(:Bucket, :list)\nfor item in bkts\n    display(item)\n    println()\nend\n```\n11. List all objects in the \na12345foo\n bucket. The list is currently empty.\n\n\njulia\nstorage(:Object, :list, \"a12345foo\")\n\n12. Upload an object to the \na12345foo\n bucket.\n\n\n```julia\n\n\nString containing the contents of test_image.jpg. The semi-colon avoids an error caused by printing the returned value.\n\n\nfile_contents = readstring(open(\"test_image.jpg\", \"r\"));\n\n\nUpload\n\n\nstorage(:Object, :insert, \"a12345foo\";     # Returns metadata about the object\n    name=\"image.jpg\",           # Object name is \"image.jpg\"\n    data=file_contents,         # The data being stored on your project\n    content_type=\"image/jpeg\"   # The contents are specified to be in JPEG format\n)\n\n\nVerify that the object is in the bucket\n\n\nobs = storage(:Object, :list, \"a12345foo\")    # Ugly print\nmap(x -\n x[:name], obs)                       # Pretty print\n```\n13. Get the \nimage.jpg\n object from the bucket.\n\n\njulia\ns = storage(:Object, :get, \"a12345foo\", \"image.jpg\");\ns == file_contents    # Verify that the retrieved data is the same as that originally posted\n\n14. Delete the \nimage.jpg\n object from the bucket.\n\n\n```julia\nstorage(:Object, :delete, \"a12345foo\", \"image.jpg\")\n\n\nVerify that the bucket is now empty\n\n\nstorage(:Object, :list, \"a12345foo\")\n```\n15. Delete the bucket.\n\n\n```julia\nstorage(:Bucket, :delete, \"a12345foo\")\n\n\nVerify that the bucket has been deleted\n\n\nbkts = storage(:Bucket, :list)\nfor item in bkts\n    display(item)\n    println()\nend\n```\n\n\n\n\n\n\n\n\nAPI Documentation\n\n\n\n\nGoogle JSON APIs\n\n\nImplemented APIs\n\n\n\n\n\n\nGoogle Cloud Platform Credentials\n\n\nError Types\n\n\nGoogle API URLs\n\n\nGoogle API Authorisation Manager\n\n\n\n\n\n\nIndex\n\n\n\n\nGoogleCloud.api\n\n\nGoogleCloud.api.storage_api\n\n\nGoogleCloud.credentials\n\n\nGoogleCloud.error\n\n\nGoogleCloud.root\n\n\nGoogleCloud.session\n\n\nGoogleCloud.api.storage_api.storage\n\n\nGoogleCloud.api.APIMethod\n\n\nGoogleCloud.api.APIResource\n\n\nGoogleCloud.api.APIRoot\n\n\nGoogleCloud.credentials.GoogleCredentials\n\n\nGoogleCloud.credentials.GoogleCredentials\n\n\nGoogleCloud.credentials.GoogleCredentials\n\n\nGoogleCloud.error.APIError\n\n\nGoogleCloud.error.CredentialError\n\n\nGoogleCloud.error.Error\n\n\nGoogleCloud.error.SessionError\n\n\nGoogleCloud.session.GoogleSession\n\n\nGoogleCloud.session.JWTClaimSet\n\n\nGoogleCloud.session.JWTHeader\n\n\nGoogleCloud.api.execute\n\n\nGoogleCloud.api.path_replace\n\n\nGoogleCloud.api.path_tokens\n\n\nGoogleCloud.api.set_session\n\n\nGoogleCloud.root.isurl\n\n\nGoogleCloud.session.JWS\n\n\nGoogleCloud.session.SHA256withRSA\n\n\nGoogleCloud.session.authorize\n\n\nGoogleCloud.session.unixseconds", 
            "title": "Home"
        }, 
        {
            "location": "/#google-cloud-apis-for-julia", 
            "text": "This module wraps Google Cloud Platform (GCP) APIs with Julia.  Currently only the Google Storage API has been added.", 
            "title": "Google Cloud APIs for Julia"
        }, 
        {
            "location": "/#quick-start", 
            "text": "This Quick Start walks through the steps required to store and retrieve data from Google Cloud Storage.   If you don't already have a Google account, create one  here .  Sign in to the GCP console  here .   Create a new project by clicking on the  Project  drop-down menu at the top of the page. If you already have a GCP project, click on the drop-down menu at the top of the page and select  Create project .  A GCP project is a set of resources with common settings that is billed and managed separately from any resource outside the set. Thus a resource exists in exactly one project. Examples of resources include GCE instances, storage volumes and data on those volumes. A project's settings include ownership, users and their permissions, and associated GCP services. As a user anything you do on GCP happens within a project, including data storage, compute, messaging, logging, etc.\n4. Associated with your project are credentials that allow users to add, read and remove resources from the project. Get the credentials for your project as a JSON file from your  GCP Credentials  page:   Type  credentials  into the search bar at the top of the console.  Select  Credentials API Manager  from the search results.  Click on the  Create credentials  drop-down menu and select  Service account key .  From the  Service Account  menu select  New service account .  From  Role  select  Storage   Storage Admin .  Ensure the key type is JSON.  Click  Create .   Credentials are then automatically downloaded in a JSON file. Save this file to your machine. In this tutorial we save the service account credentials to  ~/credentials.json .\n5. Start Julia and install the  GoogleCloud.jl  package.  julia\nPkg.add(\"GoogleCloud\")\nusing GoogleCloud \n6. Load the service account credentials.  julia\ncreds = GoogleCredentials(expanduser(\"~/credentials.json\")) \n7. Create a session with the credentials, requesting any required scopes.  julia\nsession = GoogleSession(creds, [\"devstorage.full_control\"]) \n8. Set the default session of an API using  set_session  julia\nset_session(storage, session)    # storage is a variable exported from GoogleCloud.jl \n9. List all existing buckets in your project. The list contains a default bucket.  ```julia\nbkts = storage(:Bucket, :list)    # storage(:Bucket, :list; raw=true) returns addition information", 
            "title": "Quick Start"
        }, 
        {
            "location": "/#pretty-print", 
            "text": "for item in bkts\n    display(item)\n    println()\nend\n```\n10. Create a bucket called  a12345foo .  Note : The bucket name must be unique...across all buckets in GCP!  ```julia\nstorage(:Bucket, :insert; data=Dict(:name =  \"a12345foo\"))", 
            "title": "Pretty print"
        }, 
        {
            "location": "/#verify-the-new-bucket-exists-in-the-project", 
            "text": "bkts = storage(:Bucket, :list)\nfor item in bkts\n    display(item)\n    println()\nend\n```\n11. List all objects in the  a12345foo  bucket. The list is currently empty.  julia\nstorage(:Object, :list, \"a12345foo\") \n12. Upload an object to the  a12345foo  bucket.  ```julia", 
            "title": "Verify the new bucket exists in the project"
        }, 
        {
            "location": "/#string-containing-the-contents-of-test_imagejpg-the-semi-colon-avoids-an-error-caused-by-printing-the-returned-value", 
            "text": "file_contents = readstring(open(\"test_image.jpg\", \"r\"));", 
            "title": "String containing the contents of test_image.jpg. The semi-colon avoids an error caused by printing the returned value."
        }, 
        {
            "location": "/#upload", 
            "text": "storage(:Object, :insert, \"a12345foo\";     # Returns metadata about the object\n    name=\"image.jpg\",           # Object name is \"image.jpg\"\n    data=file_contents,         # The data being stored on your project\n    content_type=\"image/jpeg\"   # The contents are specified to be in JPEG format\n)", 
            "title": "Upload"
        }, 
        {
            "location": "/#verify-that-the-object-is-in-the-bucket", 
            "text": "obs = storage(:Object, :list, \"a12345foo\")    # Ugly print\nmap(x -  x[:name], obs)                       # Pretty print\n```\n13. Get the  image.jpg  object from the bucket.  julia\ns = storage(:Object, :get, \"a12345foo\", \"image.jpg\");\ns == file_contents    # Verify that the retrieved data is the same as that originally posted \n14. Delete the  image.jpg  object from the bucket.  ```julia\nstorage(:Object, :delete, \"a12345foo\", \"image.jpg\")", 
            "title": "Verify that the object is in the bucket"
        }, 
        {
            "location": "/#verify-that-the-bucket-is-now-empty", 
            "text": "storage(:Object, :list, \"a12345foo\")\n```\n15. Delete the bucket.  ```julia\nstorage(:Bucket, :delete, \"a12345foo\")", 
            "title": "Verify that the bucket is now empty"
        }, 
        {
            "location": "/#verify-that-the-bucket-has-been-deleted", 
            "text": "bkts = storage(:Bucket, :list)\nfor item in bkts\n    display(item)\n    println()\nend\n```", 
            "title": "Verify that the bucket has been deleted"
        }, 
        {
            "location": "/#api-documentation", 
            "text": "Google JSON APIs  Implemented APIs    Google Cloud Platform Credentials  Error Types  Google API URLs  Google API Authorisation Manager", 
            "title": "API Documentation"
        }, 
        {
            "location": "/#index", 
            "text": "GoogleCloud.api  GoogleCloud.api.storage_api  GoogleCloud.credentials  GoogleCloud.error  GoogleCloud.root  GoogleCloud.session  GoogleCloud.api.storage_api.storage  GoogleCloud.api.APIMethod  GoogleCloud.api.APIResource  GoogleCloud.api.APIRoot  GoogleCloud.credentials.GoogleCredentials  GoogleCloud.credentials.GoogleCredentials  GoogleCloud.credentials.GoogleCredentials  GoogleCloud.error.APIError  GoogleCloud.error.CredentialError  GoogleCloud.error.Error  GoogleCloud.error.SessionError  GoogleCloud.session.GoogleSession  GoogleCloud.session.JWTClaimSet  GoogleCloud.session.JWTHeader  GoogleCloud.api.execute  GoogleCloud.api.path_replace  GoogleCloud.api.path_tokens  GoogleCloud.api.set_session  GoogleCloud.root.isurl  GoogleCloud.session.JWS  GoogleCloud.session.SHA256withRSA  GoogleCloud.session.authorize  GoogleCloud.session.unixseconds", 
            "title": "Index"
        }, 
        {
            "location": "/api/credentials/", 
            "text": "Google Cloud Platform Credentials\n\n\n#\n\n\nGoogleCloud.credentials\n \n \nModule\n.\n\n\nGoogle Cloud Platform service-account API credentials.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.credentials.GoogleCredentials\n \n \nType\n.\n\n\nGoogleCredentials(...)\n\n\n\n\nParse JSON credentials created for a service-account at \nGoogle Cloud Platform Console\n\n\nsource\n\n\n#\n\n\nGoogleCloud.credentials.GoogleCredentials\n \n \nMethod\n.\n\n\nGoogleCredentials(data::Dict{Symbol, String})\n\n\n\n\nInitialise credentials from dictionary containing values.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.credentials.GoogleCredentials\n \n \nMethod\n.\n\n\nGoogleCredentials(filename)\n\n\n\n\nLoad credentials from a JSON file.\n\n\nsource", 
            "title": "Credentials"
        }, 
        {
            "location": "/api/credentials/#google-cloud-platform-credentials", 
            "text": "#  GoogleCloud.credentials     Module .  Google Cloud Platform service-account API credentials.  source  #  GoogleCloud.credentials.GoogleCredentials     Type .  GoogleCredentials(...)  Parse JSON credentials created for a service-account at  Google Cloud Platform Console  source  #  GoogleCloud.credentials.GoogleCredentials     Method .  GoogleCredentials(data::Dict{Symbol, String})  Initialise credentials from dictionary containing values.  source  #  GoogleCloud.credentials.GoogleCredentials     Method .  GoogleCredentials(filename)  Load credentials from a JSON file.  source", 
            "title": "Google Cloud Platform Credentials"
        }, 
        {
            "location": "/api/session/", 
            "text": "Google API Authorisation Manager\n\n\n#\n\n\nGoogleCloud.session\n \n \nModule\n.\n\n\nOAuth 2.0 Google Sessions\n\n\nsource\n\n\n#\n\n\nGoogleCloud.session.GoogleSession\n \n \nType\n.\n\n\nGoogleSession(...)\n\n\nOAuth 2.0 session for Google using provided credentials.\n\n\nCaches authorisation tokens up to expiry.\n\n\nsess = GoogleSession(GoogleCredentials(expanduser(\n~/auth.json\n)), [\ndevstorage.full_control\n])\n\n\n\n\nsource\n\n\n#\n\n\nGoogleCloud.session.authorize\n \n \nMethod\n.\n\n\nauthorize(session[; cache=true)\n\n\n\n\nGet OAuth 2.0 authorisation token from Google.\n\n\nIf \ncache\n set to \ntrue\n, get a new token only if the existing token has not expired.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.session.JWTClaimSet\n \n \nType\n.\n\n\nJWTClaimSet\n\n\n\n\nJSON Web Token claim-set.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.session.JWTHeader\n \n \nType\n.\n\n\nJWTHeader\n\n\n\n\nJSON Web Token header.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.session.JWS\n \n \nFunction\n.\n\n\nJWS(credentials, claimset)\n\n\n\n\nConstruct the Base64-encoded JSON Web Signature based on the JWT header, claimset and signed using the private key provided in the Google JSON service-account key.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.session.SHA256withRSA\n \n \nMethod\n.\n\n\nSHA256withRSA(message, key)\n\n\n\n\nSign message using private key with RSASSA-PKCS1-V1_5-SIGN algorithm.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.session.unixseconds\n \n \nMethod\n.\n\n\nunixseconds(x)\n\n\n\n\nConvert date-time into unix seconds.\n\n\nsource", 
            "title": "Sessions"
        }, 
        {
            "location": "/api/session/#google-api-authorisation-manager", 
            "text": "#  GoogleCloud.session     Module .  OAuth 2.0 Google Sessions  source  #  GoogleCloud.session.GoogleSession     Type .  GoogleSession(...)  OAuth 2.0 session for Google using provided credentials.  Caches authorisation tokens up to expiry.  sess = GoogleSession(GoogleCredentials(expanduser( ~/auth.json )), [ devstorage.full_control ])  source  #  GoogleCloud.session.authorize     Method .  authorize(session[; cache=true)  Get OAuth 2.0 authorisation token from Google.  If  cache  set to  true , get a new token only if the existing token has not expired.  source  #  GoogleCloud.session.JWTClaimSet     Type .  JWTClaimSet  JSON Web Token claim-set.  source  #  GoogleCloud.session.JWTHeader     Type .  JWTHeader  JSON Web Token header.  source  #  GoogleCloud.session.JWS     Function .  JWS(credentials, claimset)  Construct the Base64-encoded JSON Web Signature based on the JWT header, claimset and signed using the private key provided in the Google JSON service-account key.  source  #  GoogleCloud.session.SHA256withRSA     Method .  SHA256withRSA(message, key)  Sign message using private key with RSASSA-PKCS1-V1_5-SIGN algorithm.  source  #  GoogleCloud.session.unixseconds     Method .  unixseconds(x)  Convert date-time into unix seconds.  source", 
            "title": "Google API Authorisation Manager"
        }, 
        {
            "location": "/api/api/", 
            "text": "Google JSON APIs\n\n\n#\n\n\nGoogleCloud.api\n \n \nModule\n.\n\n\nGeneral framework for representing Google JSON APIs.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.api.APIMethod\n \n \nType\n.\n\n\nAPIMethod(verb, path, description)\n\n\n\n\nMaps a method in the API to an HTTP verb and path.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.api.APIResource\n \n \nType\n.\n\n\nAPIResource(path, methods)\n\n\n\n\nRepresents a resource in the API, typically rooted at a specific point in the REST hierarchy.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.api.APIRoot\n \n \nType\n.\n\n\nAPIRoot(...)\n\n\n\n\nRepresent a Google JSON API containing resources, accessible via scopes.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.api.set_session\n \n \nMethod\n.\n\n\nset_session(api, session)\n\n\n\n\nSet the default session for a specific API. Set session to \nnothing\n to forget session.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.api.execute\n \n \nMethod\n.\n\n\nexecute(session::GoogleSession, resource::APIResource, method::APIMethod, path_args::String...[; ...])\n\n\n\n\nExecute a method against the provided path arguments.\n\n\nOptionally provide parameters and data (with optional MIME content-type).\n\n\nsource\n\n\n#\n\n\nGoogleCloud.api.path_replace\n \n \nMethod\n.\n\n\npath_replace(path, values)\n\n\n\n\nReplace path tokens in path with values.\n\n\nAssumes values are provided in the same order in which tokens appear in the path.\n\n\npath_replace(\n/{foo}/{bar}/{baz}\n, [\nthis\n, \nis\n, \nit\n])\n# output\n\n/this/is/it\n\n\n\n\n\nsource\n\n\n#\n\n\nGoogleCloud.api.path_tokens\n \n \nMethod\n.\n\n\npath_tokens(path)\n\n\n\n\nExtract tokens from a path, e.g.\n\n\npath_tokens(\n/{foo}/{bar}/x/{baz}\n)\n# output\n3-element Array{SubString{String},1}:\n \n{foo}\n\n \n{bar}\n\n \n{baz}\n\n\n\n\n\nsource\n\n\n\n\nImplemented APIs\n\n\n#\n\n\nGoogleCloud.api.storage_api\n \n \nModule\n.\n\n\nGoogle Cloud Storage API\n\n\nsource\n\n\n#\n\n\nGoogleCloud.api.storage_api.storage\n \n \nConstant\n.\n\n\nGoogle Cloud Storage API root.\n\n\nsource", 
            "title": "API Representation"
        }, 
        {
            "location": "/api/api/#google-json-apis", 
            "text": "#  GoogleCloud.api     Module .  General framework for representing Google JSON APIs.  source  #  GoogleCloud.api.APIMethod     Type .  APIMethod(verb, path, description)  Maps a method in the API to an HTTP verb and path.  source  #  GoogleCloud.api.APIResource     Type .  APIResource(path, methods)  Represents a resource in the API, typically rooted at a specific point in the REST hierarchy.  source  #  GoogleCloud.api.APIRoot     Type .  APIRoot(...)  Represent a Google JSON API containing resources, accessible via scopes.  source  #  GoogleCloud.api.set_session     Method .  set_session(api, session)  Set the default session for a specific API. Set session to  nothing  to forget session.  source  #  GoogleCloud.api.execute     Method .  execute(session::GoogleSession, resource::APIResource, method::APIMethod, path_args::String...[; ...])  Execute a method against the provided path arguments.  Optionally provide parameters and data (with optional MIME content-type).  source  #  GoogleCloud.api.path_replace     Method .  path_replace(path, values)  Replace path tokens in path with values.  Assumes values are provided in the same order in which tokens appear in the path.  path_replace( /{foo}/{bar}/{baz} , [ this ,  is ,  it ])\n# output /this/is/it   source  #  GoogleCloud.api.path_tokens     Method .  path_tokens(path)  Extract tokens from a path, e.g.  path_tokens( /{foo}/{bar}/x/{baz} )\n# output\n3-element Array{SubString{String},1}:\n  {foo} \n  {bar} \n  {baz}   source", 
            "title": "Google JSON APIs"
        }, 
        {
            "location": "/api/api/#implemented-apis", 
            "text": "#  GoogleCloud.api.storage_api     Module .  Google Cloud Storage API  source  #  GoogleCloud.api.storage_api.storage     Constant .  Google Cloud Storage API root.  source", 
            "title": "Implemented APIs"
        }, 
        {
            "location": "/api/root/", 
            "text": "Google API URLs\n\n\n#\n\n\nGoogleCloud.root\n \n \nModule\n.\n\n\nGoogle API URL roots.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.root.isurl\n \n \nMethod\n.\n\n\nisurl(path)\n\n\n\n\nReturn true if \npath\n is a URL and false a path fragment.\n\n\nsource", 
            "title": "API Root URLs"
        }, 
        {
            "location": "/api/root/#google-api-urls", 
            "text": "#  GoogleCloud.root     Module .  Google API URL roots.  source  #  GoogleCloud.root.isurl     Method .  isurl(path)  Return true if  path  is a URL and false a path fragment.  source", 
            "title": "Google API URLs"
        }, 
        {
            "location": "/api/error/", 
            "text": "Error Types\n\n\n#\n\n\nGoogleCloud.error\n \n \nModule\n.\n\n\nBasic exceptions.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.error.APIError\n \n \nType\n.\n\n\nAn error from the API.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.error.CredentialError\n \n \nType\n.\n\n\nAn error in the provided credentials.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.error.SessionError\n \n \nType\n.\n\n\nAn error in establising a session.\n\n\nsource\n\n\n#\n\n\nGoogleCloud.error.Error\n \n \nType\n.\n\n\nBase error type.\n\n\nsource", 
            "title": "Error Types"
        }, 
        {
            "location": "/api/error/#error-types", 
            "text": "#  GoogleCloud.error     Module .  Basic exceptions.  source  #  GoogleCloud.error.APIError     Type .  An error from the API.  source  #  GoogleCloud.error.CredentialError     Type .  An error in the provided credentials.  source  #  GoogleCloud.error.SessionError     Type .  An error in establising a session.  source  #  GoogleCloud.error.Error     Type .  Base error type.  source", 
            "title": "Error Types"
        }
    ]
}